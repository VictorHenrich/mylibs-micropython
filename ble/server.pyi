from typing import Tuple, Any
from bluetooth import BLE, UUID

from patterns.abstract import AbstractClass

class BluetoothServerParams:
    def __init__(
        self,
        ble: BLE,
        uart_transmitter: Tuple[UUID, int],
        uart_receiver: Tuple[UUID, int],
        transmitter_handler: memoryview,
        receiver_handler: memoryview,
    ) -> None: ...
    @property
    def ble(self) -> BLE: ...
    @property
    def uart_transmitter(self) -> Tuple[UUID, int]: ...
    @property
    def uart_receiver(self) -> Tuple[UUID, int]: ...
    @property
    def transmitter_handler(self) -> memoryview: ...
    @property
    def receiver_handler(self) -> memoryview: ...

class BluetoothEventHandler(AbstractClass):
    def __init__(self, event_type: int) -> None: ...
    @property
    def event_type(self) -> int: ...
    @AbstractClass.abstract_method
    def handle(self, server_params: BluetoothServerParams, data: Any) -> None: ...

class BluetoothServer:
    def __init__(self) -> None: ...
    def __handle_events(self, event: int, data: Any) -> None: ...
    def __create_and_configure_ble_instance(self) -> BluetoothServerParams: ...
    def add_event_handler(self, *handlers: BluetoothEventHandler) -> None: ...
    def start_scan(self, duration: int = 0) -> None: ...
    def stop_scan(self) -> None: ...
    def start_advertise(self, interval: int = 100) -> None: ...
    def stop_advertise(self) -> None: ...
    def add_peripheral(
        self, address_type: int, address: bytes, connection_handler: memoryview
    ) -> None: ...
    def remove_peripheral(self, connection_handler: memoryview) -> None: ...
    def send_notification(self, data: str) -> None: ...
